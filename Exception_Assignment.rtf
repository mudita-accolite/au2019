{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset0 Liberation Serif{\*\falt Times New Roman};}{\f4\fswiss\fprq2\fcharset0 Liberation Sans{\*\falt Arial};}{\f5\fnil\fprq2\fcharset0 Microsoft YaHei;}{\f6\fnil\fprq2\fcharset0 Arial;}{\f7\fswiss\fprq0\fcharset128 Arial;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet{\s0\snext0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393 Normal;}
{\*\cs15\snext15 Numbering Symbols;}
{\s16\sbasedon0\snext17\sb240\sa120\keepn\dbch\af5\dbch\af6\afs28\loch\f4\fs28 Heading;}
{\s17\sbasedon0\snext17\sl276\slmult1\sb0\sa140 Text Body;}
{\s18\sbasedon17\snext18\sl276\slmult1\sb0\sa140\dbch\af7 List;}
{\s19\sbasedon0\snext19\sb120\sa120\noline\i\dbch\af7\afs24\ai\fs24 Caption;}
{\s20\sbasedon0\snext20\noline\dbch\af7 Index;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00.;}{\levelnumbers\'01;}\fi0\li0}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-360\li1080}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-360\li1440}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-360\li1800}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-360\li2160}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-360\li2520}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-360\li2880}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-360\li3240}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-360\li3600}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc4\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'00);}{\levelnumbers\'01;}\fi-360\li720}
{\listlevel\levelnfc1\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'01.;}{\levelnumbers\'01;}\fi-360\li1080}
{\listlevel\levelnfc1\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'02.;}{\levelnumbers\'01;}\fi-360\li1440}
{\listlevel\levelnfc1\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'03.;}{\levelnumbers\'01;}\fi-360\li1800}
{\listlevel\levelnfc1\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'04.;}{\levelnumbers\'01;}\fi-360\li2160}
{\listlevel\levelnfc1\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'05.;}{\levelnumbers\'01;}\fi-360\li2520}
{\listlevel\levelnfc1\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'06.;}{\levelnumbers\'01;}\fi-360\li2880}
{\listlevel\levelnfc1\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'07.;}{\levelnumbers\'01;}\fi-360\li3240}
{\listlevel\levelnfc1\leveljc0\levelstartat1\levelfollow0{\leveltext \'02\'08.;}{\levelnumbers\'01;}\fi-360\li3600}\listid2}
{\list\listtemplateid3
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}
{\listlevel\levelnfc255\leveljc0\levelstartat1\levelfollow2{\leveltext \'00;}{\levelnumbers;}\fi0\li0}\listid3}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}}{\*\generator LibreOffice/6.2.4.2$Windows_X86_64 LibreOffice_project/2412653d852ce75f65fbfa83fb7e7b669a126d64}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr2019\mo7\dy28\hr21\min13}{\printim\yr0\mo0\dy0\hr0\min0}}{\*\userprops}\deftab720
\viewscale100
{\*\pgdsctbl
{\pgdsc0\pgdscuse451\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\pgdscnxt0 Default Style;}}
\formshade{\*\pgdscno0}\paperh15840\paperw12240\margl1800\margr1800\margt1440\margb1440\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
{\*\ftnsep\chftnsep}\pgndec\pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Que:Is there any way to "get around" the strict restrictions placed on methods by the throws clause?}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Yes. }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
There is a way though}{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
 the }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
correct}{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
 solution }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
would be}{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
 to go back and redesign }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
o}{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
ur methods to reflect the exceptions that }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
we }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
need to throw. }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Assume}{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
, however, that for some reason a system class }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
is restricting us,}{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
 our first solution is to subclass RuntimeException to make up a new, exempt exception of our own. Now }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
we}{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
 can throw it to our }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
satisfaction}{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
, because the throws clause that was annoying }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
earlier }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
does not need to include this new exception. If }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
we }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
need a lot of such exceptions, an elegant approach is to mix in some novel exception interfaces to our new Runtime classes. }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
We can}{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
 choose whatever subset of these new interfaces }{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
we}{\b0\ab0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
 want to catch (none of the normal Runtime exceptions need be caught), while any leftover (new) Runtime exceptions are (legally) allowed to go through that otherwise annoying standard method in the library.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Que:Differences between exceptions, errors, and runtime exceptions.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Error:}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Error is a subclass of the built-in class \u8220\'93Throwable\u8221\'94. Errors are the critical conditions that occur due to the lack of the system resources, and it can not be handled by the code of the program. Errors can not be recovered by any means because they can not be created, thrown, caught or replied.  Errors are caused due to the catastrophic failure which usually can not be handled by your program. Errors are always of unchecked type, as compiler do not have any knowledge about its occurrence. Errors always occur in the run-time environment. The error can be explained with the help of an example, the program has an error of stack overflow,  out of memory error, or a system crash error, this kind of error are due to the system. The code is not responsible for such errors. The consequence of the occurrence of the error is that the program gets terminated abnormally.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Exception:}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Exception\u8221\'94 is also a subclass of built-in class \u8220\'93Throwable\u8221\'94. Exceptions are the exceptional conditions that occur in a runtime environment. Most of the times exceptions are caused due to the code of our program.But, exceptions can be handled by the program itself, as exceptions are recoverable. Exceptions are handled by using three keywords \u8220\'93try\u8221\'94, \u8220\'93catch\u8221\'94, \u8220\'93throw.Checked Exceptions are either objects of the class java.lang.exception or its subclasses (except the java.lang.RuntimeException and its subclasses). Checked exceptions are \u8220\'93checked\u8221\'94 at compile time. That means the programmer must either catch or throw these exceptions, or else the compile would complain (causing a compiler error). Because of this reason, many checked exceptions are very well known to programmers. For example, the IOException and its sub classes are checked exceptions, and whenever the programmer is dealing with accessing or modifying a file, compiler checks to make sure that all possible IOExceptions are taken care of by the programmer.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Runtime Exception:}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Runtime Exceptions consist of java.lang.RuntimeException and all its sub classes. Theoretically speaking, they serve the same purpose as checked exceptions, and can be thrown or handled like checked exception, but the handling of them is not enforced by the compiler. Therefore, Runtime exceptions belong to the family of unchecked exceptions. NullPointerException, NumberFormatEception, ClassCastException and ArrayIndexOutOfBoundsException are common runtime exceptions in Java.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Important Differences between Error and Exceptions:}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393{\listtext\pard\plain  1.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\qj\li720\ri0\lin720\rin0\fi-360\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Error occur only when system resources are deficient whereas, an exception is caused if a code has some problem.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393{\listtext\pard\plain  2.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\qj\li720\ri0\lin720\rin0\fi-360\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
An error can never be recovered whereas, an exception can be recovered by preparing the code to handle the exception.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393{\listtext\pard\plain  3.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\qj\li720\ri0\lin720\rin0\fi-360\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
An error can never be handled but, an exception can be handled by the code if the code throwing an exception is written inside a try and catch block.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393{\listtext\pard\plain  4.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\qj\li720\ri0\lin720\rin0\fi-360\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
If an error has occurred, the program will be terminated abnormally. On the other hand, If the exception occurs the program will throw an exception, and it is handled using the try and catch block.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393{\listtext\pard\plain  5.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\qj\li720\ri0\lin720\rin0\fi-360\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Errors are of unchecked type i.e. error are not in the knowledge of compilers whereas, an exception is classified as checked and unchecked.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393{\listtext\pard\plain  6.\tab}\ilvl0\ls1 \li720\ri0\lin720\rin0\fi0\sl276\slmult1\qj\li720\ri0\lin720\rin0\fi-360\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Errors are defined in java.lang.Error package whereas, an exception is defined java.lang.Exception.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200{\b\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Important Differences between Checked Exception and Runtime Exception}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393{\listtext\pard\plain  a)\tab}\ilvl0\ls2 \li1080\ri0\lin1080\rin0\fi-360\sl276\slmult1\qj\li360\ri0\lin360\rin0\fi0\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Checked exception handling is enforced by the compiler, but runtime exceptions are not.  }
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393{\listtext\pard\plain  b)\tab}\ilvl0\ls2 \li1080\ri0\lin1080\rin0\fi-360\sl276\slmult1\qj\li360\ri0\lin360\rin0\fi0\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Checked exceptions must to be thrown or handled in order for the code to compile, but there is no such requirement regarding runtime exceptions. Consequently, runtime exceptions belong to unchecked exceptions category along with errors.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393{\listtext\pard\plain  c)\tab}\ilvl0\ls2 \li1080\ri0\lin1080\rin0\fi-360\sl276\slmult1\qj\li360\ri0\lin360\rin0\fi0\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Disadvantage with checked exceptions is that the programmer has to handle it even if he/she does not know how to. So, if the programmer just throws a new exception without wrapping the original, the stack trace belonging to the original exception will be lost. This is where runtime exceptions come in handy. Because all runtime exceptions can be handled in a single place, thus programmers can write less amount of code. }
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393{\listtext\pard\plain  d)\tab}\ilvl0\ls2 \li1080\ri0\lin1080\rin0\fi-360\sl276\slmult1\qj\li360\ri0\lin360\rin0\fi0\sb0\sa200{\b0\rtlch \ltrch\loch\fs24\lang9\loch\f0\hich\af0
Since checked exceptions must be caught, there is no surprise for the programmer. he will always know which checked exception could be thrown by a certain method. Contrary to this, various runtime exceptions can be thrown without the knowledge of the programmer.}
\par \pard\plain \s0\nowidctlpar\hyphpar0\cf0\kerning1\dbch\af8\langfe2052\dbch\af6\afs24\alang1081\loch\f3\hich\af3\fs24\lang16393\sl276\slmult1\qj\sb0\sa200\rtlch \ltrch\loch

\par }